import forte2
import numpy as np
import scipy as sp

from forte2.scf import RHF


def test_rhf_long():
    # Test the SCF implementation with a simple example
    xyz = """
C       -1.6896697203      2.2905259736      0.0275805886                 
C       -1.9730520670      0.9252034516      0.0916110133                 
C       -0.3621532091      2.7488436228      0.0246093668                 
C        0.6935192872      1.8099410392      0.0865519314                 
C        0.3910589050      0.4399834209      0.1505657419                 
C       -0.9340602211      0.0011635918      0.1533136907                 
H        1.1893393548     -0.2970347533      0.1992130443                 
H       -1.1534697719     -1.0620577664      0.2036616421                 
H       -2.5148545787      2.9973618761     -0.0200322739                 
H       -3.0051321699      0.5847293904      0.0934003094                 
C       -0.0597096809      4.1188584068     -0.0382503603                 
C        1.2653981450      4.5577165336     -0.0402247707                 
C        2.3044115691      3.6336035273      0.0200014247                 
C        2.0210451188      2.2682270990      0.0829433888                 
H        2.8462455756      1.5613382933      0.1294885269                 
H        3.3364912209      3.9740791178      0.0182434513                 
H        1.4847817094      5.6210259948     -0.0887939559                 
H       -0.8580037770      4.8559228717     -0.0859634340
    """

    system = forte2.System(xyz=xyz, basis="cc-pVTZ", auxiliary_basis="cc-pVTZ-JKFIT")

    scf = RHF(charge=0)
    scf.run(system)
    assert np.isclose(
        scf.E, -383.4701768569434535, atol=1e-10
    ), f"SCF energy {scf.E} is not close to expected value -76.0614664043887672"


if __name__ == "__main__":
    test_rhf_long()
